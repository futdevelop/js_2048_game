{"mappings":"ACIA,MAAM,EAAO,ICDb,MACE,YAAY,EAAe,IAAI,CAAE,CAC/B,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,CACR,GACA,MAAM,IAAI,CAAC,CAAE,OAAQ,IAAI,CAAC,IAAI,AAAC,EAAG,IAAM,MAAM,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAChE,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,eAAe,EACtB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,gBAAgB,EAAW,CAAA,CAAK,CAAE,CAC5B,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,GAEtB,CAEA,OAAQ,CACN,QAAQ,GAAG,CAAC,SACZ,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,eAAe,CAAC,CAAA,EACvB,CAEA,SAAU,CACR,QAAQ,GAAG,CAAC,WACZ,IAAI,CAAC,KAAK,CAAG,MAAM,IAAI,CAAC,CAAE,OAAQ,IAAI,CAAC,IAAI,AAAC,EAAG,IAC7C,MAAM,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAExB,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,eAAe,CAAC,CAAA,EACvB,CAEA,QAAS,CACP,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EACzC,CAEA,UAAW,CACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAC3C,CAEA,WAAY,CACV,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAC5C,CAEA,UAAW,CACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,EAC3C,CAEA,SAAS,CAAgB,CAAE,CACzB,IAAM,EAAgB,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAC/C,IAEI,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,IAAM,IACjC,IAAI,CAAC,aAAa,GAEd,IAAI,CAAC,QAAQ,GACf,IAAI,CAAC,MAAM,CAAG,MACL,IAAI,CAAC,SAAS,IACvB,CAAA,IAAI,CAAC,MAAM,CAAG,MADT,EAIX,CAEA,eAAgB,CACd,IAAM,EAAa,EAAE,CACrB,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACJ,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAC,EAAK,EAAI,EAKhC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,GAAM,CAAC,EAAK,EAAI,CACd,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,AAC3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnD,CACF,CAEA,cAAe,CACb,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,CAEtD,CAEA,eAAgB,CACd,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,IAAI,CAAC,WAAW,CAChC,IAAI,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,CAAC,OAAO,IAC5B,OAAO,EAEb,CAEA,YAAa,CACX,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAAO,CACxC,IAAM,EAAS,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAI,EAG/C,AAFmB,IAAI,CAAC,WAAW,CAAC,GAEzB,OAAO,CAAC,CAAC,EAAO,KACzB,IAAI,CAAC,KAAK,CAAC,EAAS,CAAC,EAAI,CAAG,CAC9B,EACF,CACF,CAEA,cAAe,CACb,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAAO,CACxC,IAAM,EAAS,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,AAAC,GAAQ,CAAG,CAAC,EAAI,EAAE,OAAO,GAGxD,AAFmB,IAAI,CAAC,WAAW,CAAC,GAAQ,OAAO,GAExC,OAAO,CAAC,CAAC,EAAO,KACzB,IAAI,CAAC,KAAK,CAAC,EAAS,CAAC,EAAI,CAAG,CAC9B,EACF,CACF,CAEA,YAAY,CAAG,CAAE,CACf,IAAM,EAAS,EAAI,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,GACnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,CACvB,CAAM,CAAC,EAAI,EAAE,CAAG,GAGpB,MAAO,IACF,EAAO,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,MACvB,MAAM,IAAI,CAAC,IAAI,CAAG,EAAO,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,GAAW,MAAM,EAAE,IAAI,CAAC,GACrE,AACH,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,MAC/C,CAEA,WAAY,CACV,GAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,AAAC,GAAQ,EAAI,QAAQ,CAAC,IAAK,MAAO,CAAA,EACtD,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IACjC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,IAAI,CAAE,IAAO,CACxC,IAAM,EAAU,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CACpC,GACE,EAAO,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,EAC/C,EAAM,IAAI,CAAC,IAAI,CAAG,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,EAC3D,EAAM,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAC/C,EAAM,IAAI,CAAC,IAAI,CAAG,GAAK,IAAY,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,CAE5D,MAAO,CAAA,CAEX,CAEF,MAAO,CAAA,CACT,CACF,EDrIA,SAAS,IACP,IAAM,EAAQ,EAAK,QAAQ,GAM3B,AAHc,SAAS,gBAAgB,CAAC,eAGlC,OAAO,CAAC,CAAC,EAAM,KACnB,IAAM,EAAQ,CAAK,CAAC,KAAK,KAAK,CAAC,EAAQ,GAAG,CAAC,EAAQ,EAAE,AAGrD,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,CAAC,uBAAuB,EAAE,EAAA,CAAO,AACpD,GAEA,SAAS,aAAa,CAAC,eAAe,WAAW,CAAG,EAAK,QAAQ,GAEjE,IAAM,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAe,SAAS,aAAa,CAAC,kBAE5C,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAa,SAAS,CAAC,GAAG,CAAC,UAEvB,AAAqB,QAArB,EAAK,SAAS,GAChB,EAAW,SAAS,CAAC,MAAM,CAAC,UACnB,AAAqB,SAArB,EAAK,SAAS,GACvB,EAAY,SAAS,CAAC,MAAM,CAAC,UACC,SAArB,EAAK,SAAS,IACvB,EAAa,SAAS,CAAC,MAAM,CAAC,UAGhC,AAGF,WACE,IAAM,EAAS,SAAS,aAAa,CAAC,UAElC,AAAqB,CAAA,SAArB,EAAK,SAAS,IAChB,EAAO,WAAW,CAAG,QACrB,EAAO,SAAS,CAAC,GAAG,CAAC,SACrB,EAAO,SAAS,CAAC,MAAM,CAAC,aAExB,EAAO,WAAW,CAAG,UACrB,EAAO,SAAS,CAAC,GAAG,CAAC,WACrB,EAAO,SAAS,CAAC,MAAM,CAAC,SAE5B,GAdA,CAhEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,GAAI,AAAqB,YAArB,EAAK,SAAS,GAAkB,CAClC,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,EAEjB,CACA,GACF,CACF,GAEA,SAAS,aAAa,CAAC,WAAW,gBAAgB,CAAC,QAAS,KACtD,AAAqB,SAArB,EAAK,SAAS,GAChB,EAAK,KAAK,GAEV,EAAK,OAAO,GAGd,GACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\n/* eslint-disable */ class $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.size = 4;\n        this.board = initialState || Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n        this.score = 0;\n        this.status = 'idle';\n        this.initializeBoard();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    initializeBoard(addTiles = false) {\n        if (addTiles) {\n            this.addRandomTile();\n            this.addRandomTile();\n        }\n    }\n    start() {\n        console.log('start');\n        this.status = 'playing';\n        this.initializeBoard(true);\n    }\n    restart() {\n        console.log('restart');\n        this.board = Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n        this.score = 0;\n        this.status = 'idle';\n        this.initializeBoard(false);\n    }\n    moveUp() {\n        this.makeMove(this.compressUp.bind(this));\n    }\n    moveDown() {\n        this.makeMove(this.compressDown.bind(this));\n    }\n    moveRight() {\n        this.makeMove(this.compressRight.bind(this));\n    }\n    moveLeft() {\n        this.makeMove(this.compressLeft.bind(this));\n    }\n    makeMove(compressFunction) {\n        const previousState = JSON.stringify(this.board);\n        compressFunction();\n        if (JSON.stringify(this.board) !== previousState) {\n            this.addRandomTile();\n            if (this.checkWin()) this.status = 'win';\n            else if (this.checkLose()) this.status = 'lose';\n        }\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length > 0) {\n            const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    compressLeft() {\n        for(let row = 0; row < this.size; row++)this.board[row] = this.compressRow(this.board[row]);\n    }\n    compressRight() {\n        for(let row = 0; row < this.size; row++)this.board[row] = this.compressRow([\n            ...this.board[row]\n        ].reverse()).reverse();\n    }\n    compressUp() {\n        for(let col = 0; col < this.size; col++){\n            const column = this.board.map((row)=>row[col]);\n            const compressed = this.compressRow(column);\n            compressed.forEach((value, rowIndex)=>{\n                this.board[rowIndex][col] = value;\n            });\n        }\n    }\n    compressDown() {\n        for(let col = 0; col < this.size; col++){\n            const column = this.board.map((row)=>row[col]).reverse();\n            const compressed = this.compressRow(column).reverse();\n            compressed.forEach((value, rowIndex)=>{\n                this.board[rowIndex][col] = value;\n            });\n        }\n    }\n    compressRow(row) {\n        const newRow = row.filter((val)=>val !== 0);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            this.score += newRow[i];\n            newRow[i + 1] = 0;\n        }\n        return [\n            ...newRow.filter((val)=>val !== 0),\n            ...Array(this.size - newRow.filter((val)=>val !== 0).length).fill(0)\n        ];\n    }\n    checkWin() {\n        return this.board.some((row)=>row.includes(2048));\n    }\n    checkLose() {\n        if (this.board.some((row)=>row.includes(0))) return false;\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            const current = this.board[row][col];\n            if (row > 0 && current === this.board[row - 1][col] || row < this.size - 1 && current === this.board[row + 1][col] || col > 0 && current === this.board[row][col - 1] || col < this.size - 1 && current === this.board[row][col + 1]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\ndocument.addEventListener('keydown', (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'playing') {\n        switch(e.key){\n            case 'ArrowLeft':\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case 'ArrowRight':\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case 'ArrowUp':\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case 'ArrowDown':\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$renderGame();\n    }\n});\ndocument.querySelector('.button').addEventListener('click', ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$renderGame();\n});\nfunction $09e991522ca7e64e$var$renderGame() {\n    const board = $09e991522ca7e64e$var$game.getState(); // матриця\n    //   console.log(board)\n    const cells = document.querySelectorAll('.field-cell');\n    //   console.log(cells)\n    cells.forEach((cell, index)=>{\n        const value = board[Math.floor(index / 4)][index % 4]; // значення з матриці\n        // console.log(value)\n        cell.textContent = value === 0 ? '' : value;\n        cell.className = `field-cell field-cell--${value}`;\n    });\n    document.querySelector('.game-score').textContent = $09e991522ca7e64e$var$game.getScore();\n    const messageLose = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n    const messageStart = document.querySelector('.message-start');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n    if ($09e991522ca7e64e$var$game.getStatus() === 'win') messageWin.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'lose') messageLose.classList.remove('hidden');\n    else if ($09e991522ca7e64e$var$game.getStatus() === 'idle') messageStart.classList.remove('hidden');\n    $09e991522ca7e64e$var$updateButton();\n}\nfunction $09e991522ca7e64e$var$updateButton() {\n    const button = document.querySelector('.button');\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') {\n        button.textContent = 'Start';\n        button.classList.add('start');\n        button.classList.remove('restart');\n    } else {\n        button.textContent = 'Restart';\n        button.classList.add('restart');\n        button.classList.remove('start');\n    }\n}\n\n\n//# sourceMappingURL=index.4be404c0.js.map\n","'use strict';\n/* eslint-disable */\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n    renderGame();\n  }\n});\n\ndocument.querySelector('.button').addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  renderGame();\n});\n\nfunction renderGame() {\n  const board = game.getState(); // матриця\n  //   console.log(board)\n\n  const cells = document.querySelectorAll('.field-cell');\n  //   console.log(cells)\n\n  cells.forEach((cell, index) => {\n    const value = board[Math.floor(index / 4)][index % 4]; // значення з матриці\n    // console.log(value)\n\n    cell.textContent = value === 0 ? '' : value;\n    cell.className = `field-cell field-cell--${value}`;\n  });\n\n  document.querySelector('.game-score').textContent = game.getScore();\n\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n  const messageStart = document.querySelector('.message-start');\n\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageStart.classList.add('hidden');\n\n  if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (game.getStatus() === 'idle') {\n    messageStart.classList.remove('hidden');\n  }\n\n  updateButton();\n}\n\nfunction updateButton() {\n  const button = document.querySelector('.button');\n\n  if (game.getStatus() === 'idle') {\n    button.textContent = 'Start';\n    button.classList.add('start');\n    button.classList.remove('restart');\n  } else {\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n    button.classList.remove('start');\n  }\n}\n","'use strict';\n/* eslint-disable */\n\nclass Game {\n  constructor(initialState = null) {\n    this.size = 4;\n    this.board =\n      initialState ||\n      Array.from({ length: this.size }, () => Array(this.size).fill(0));\n    this.score = 0;\n    this.status = 'idle';\n    this.initializeBoard();\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  initializeBoard(addTiles = false) {\n    if (addTiles) {\n      this.addRandomTile();\n      this.addRandomTile();\n    }\n  }\n\n  start() {\n    console.log('start');\n    this.status = 'playing';\n    this.initializeBoard(true);\n  }\n\n  restart() {\n    console.log('restart');\n    this.board = Array.from({ length: this.size }, () =>\n      Array(this.size).fill(0),\n    );\n    this.score = 0;\n    this.status = 'idle';\n    this.initializeBoard(false);\n  }\n\n  moveUp() {\n    this.makeMove(this.compressUp.bind(this));\n  }\n\n  moveDown() {\n    this.makeMove(this.compressDown.bind(this));\n  }\n\n  moveRight() {\n    this.makeMove(this.compressRight.bind(this));\n  }\n\n  moveLeft() {\n    this.makeMove(this.compressLeft.bind(this));\n  }\n\n  makeMove(compressFunction) {\n    const previousState = JSON.stringify(this.board);\n    compressFunction();\n\n    if (JSON.stringify(this.board) !== previousState) {\n      this.addRandomTile();\n\n      if (this.checkWin()) {\n        this.status = 'win';\n      } else if (this.checkLose()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  compressLeft() {\n    for (let row = 0; row < this.size; row++) {\n      this.board[row] = this.compressRow(this.board[row]);\n    }\n  }\n\n  compressRight() {\n    for (let row = 0; row < this.size; row++) {\n      this.board[row] = this.compressRow(\n        [...this.board[row]].reverse(),\n      ).reverse();\n    }\n  }\n\n  compressUp() {\n    for (let col = 0; col < this.size; col++) {\n      const column = this.board.map((row) => row[col]);\n      const compressed = this.compressRow(column);\n\n      compressed.forEach((value, rowIndex) => {\n        this.board[rowIndex][col] = value;\n      });\n    }\n  }\n\n  compressDown() {\n    for (let col = 0; col < this.size; col++) {\n      const column = this.board.map((row) => row[col]).reverse();\n      const compressed = this.compressRow(column).reverse();\n\n      compressed.forEach((value, rowIndex) => {\n        this.board[rowIndex][col] = value;\n      });\n    }\n  }\n\n  compressRow(row) {\n    const newRow = row.filter((val) => val !== 0);\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        this.score += newRow[i];\n        newRow[i + 1] = 0;\n      }\n    }\n    return [\n      ...newRow.filter((val) => val !== 0),\n      ...Array(this.size - newRow.filter((val) => val !== 0).length).fill(0),\n    ];\n  }\n\n  checkWin() {\n    return this.board.some((row) => row.includes(2048));\n  }\n\n  checkLose() {\n    if (this.board.some((row) => row.includes(0))) return false;\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const current = this.board[row][col];\n        if (\n          (row > 0 && current === this.board[row - 1][col]) ||\n          (row < this.size - 1 && current === this.board[row + 1][col]) ||\n          (col > 0 && current === this.board[row][col - 1]) ||\n          (col < this.size - 1 && current === this.board[row][col + 1])\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","board","Array","from","length","fill","score","status","initializeBoard","getScore","getState","getStatus","addTiles","addRandomTile","start","console","log","restart","moveUp","makeMove","compressUp","bind","moveDown","compressDown","moveRight","compressRight","moveLeft","compressLeft","compressFunction","previousState","JSON","stringify","checkWin","checkLose","emptyCells","row","col","push","Math","floor","random","compressRow","reverse","column","map","compressed","forEach","value","rowIndex","newRow","filter","val","i","some","includes","current","$09e991522ca7e64e$var$renderGame","cells","document","querySelectorAll","cell","index","textContent","className","querySelector","messageLose","messageWin","messageStart","classList","add","remove","$09e991522ca7e64e$var$updateButton","button","addEventListener","e","key"],"version":3,"file":"index.4be404c0.js.map"}